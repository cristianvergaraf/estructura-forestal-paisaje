library(readr)
library(dplyr)
library(ggplot2)
library(corrplot)
library(GGally)
setwd("~/GitHub/estructura-forestal-paisaje")
par(mfrow = c(2,2))
sapply(seq(1,16),function(j)boxplot(X[,j],main=colnames(X)[j],xlab="",col="yellow"))
setwd("~/GitHub/estructura-forestal-paisaje")
# Cargamos los datos desde un archivo csv.
pl_metricas<- read.csv("metricas_seleccion_ejercicio.csv")
X <- pl_metricas[3:18]
par(mfrow = c(2,2))
sapply(seq(1,16),function(j)boxplot(X[,j],main=colnames(X)[j],xlab="",col="yellow"))
sapply(seq(1,16),function(j)boxplot(X[,j],main=colnames(X)[j],xlab="",col="yellow"))
par(mfrow=c(2,4))
sapply(seq(1,16),function(j)hist(X[,j],main=colnames(X)[j],xlab="",col="blue",breaks = "Sturges"))
par(mfrow=c(2,4))
sapply(seq(1,16),function(j)plot(density(X[,j],kernel="gaussian"),main=colnames(X)[j],xlab="",col="blue",lwd=2))
pairs(X[1:5],pch=19,col="black",
lower.panel = panel.smooth)
pairs(X[6:10],pch=19,col="black",
lower.panel = panel.smooth)
pl_metricas.cor <- cor(X, method = "pearson")
pl_round.cor <- round(pl_metricas.cor, digits = 1)
pl_metricas.cor
?cor
pl_metricas.cor <- cor(X, method = "pearson")
pl_round.cor <- round(pl_metricas.cor, digits = 2) # con esta línea dejamos solo dos dígitos para el resultado
pl_metricas.cor
par(mfrow = c(1,1))
pl_metricas.cor
pl_round.cor
# Defijimos el marco para los gráficos
par(mfrow = c(1,1))
# Definimos una escala de colores
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF",
"#77AADD", "#4477AA"))
corrplot(pl_round.cor, method = "shade", sade.col = NA,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", addcolorlabel = "no",
order = "AOE", number.digits = 2, number.cex = 0.7)
corrplot(pl_metricas.cor, method = "shade", shade.col = NA,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", addcolorlabel = "no",
order = "AOE", type = "upper",
diag = F, number.digits = 2, number.cex = 0.7)
corrplot(pl_round.cor, method = "shade", sade.col = NA,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", addcolorlabel = "no",
order = "AOE", number.digits = 2, number.cex = 0.6)
corrplot(pl_metricas.cor, method = "shade", shade.col = NA,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", addcolorlabel = "no",
order = "AOE", type = "upper",
diag = F, number.digits = 2, number.cex = 0.6)
corrplot(pl_metricas.cor, method = "shade", shade.col = NA,
tl.col = "black", tl.srt = 45,
col = col(200), addCoef.col = "black", addcolorlabel = "no",
order = "AOE", type = "upper",
diag = F, number.digits = 2, number.cex = 0.6)
ggpairs(X[1:8])
ggpairs(X[1:4])
ggpairs(X, columns = 1:4)
ggpairs(X, columns = c(1,4,7)
ggpairs(X, columns = c(1,4,7))
ggpairs(X, columns = c(1,4,7))
ggpairs(X, columns = c(1,4,7)) # podemos seleccionar algunas columnas del dataset
ggpairs(X, columns = c(1,4,7)) + geom_smooth(method = lm)
ggpairs(X, columns = c(1,4,7)) + geom_smooth(method = "lm")
ggpairs(X, columns = c(1,4,7)) + geom_smooth(method = "lm")
ggpairs(X, columns = c(1,4,7)) + geom_smooth(method = "lm")
ggpairs(X, columns = c(1,4,7))
ggpairs(X, columns = c(1,4,7), lower = list(continuos = "smooth", params = c(colour = "blue")),
diag = list(continuous = "bar", params = c(colour = "blue")),
upper = list(params = list(corSize = 6)), axis:abels = "show")
ggpairs(X, columns = c(1,4,7,8), lower = list(continuos = "smooth", params = c(colour = "blue")),
diag = list(continuous = "bar", params = c(colour = "blue")),
upper = list(params = list(corSize = 6)), axis:abels = "show")
ggpairs(X, columns = c(1,4,7,8), lower = list(continuos = "smooth", params = c(colour = "blue")),
diag=list(continuous = "bar", params = c(colour = "blue")),
upper=list(params = list(corSize = 6)), axis:abels = "show")
ggpairs(X, columns = c(1,4,7,8), lower = list(continuous = "smooth", params = c(colour = "blue")),
diag=list(continuous = "bar", params = c(colour = "blue")),
upper=list(params = list(corSize = 6)), axis:abels = "show")
ggpairs(X, columns = c(1,4,7,8), lower = list(continuous = "smooth", params = c(colour = "blue")),
diag=list(continuous = "bar", params = c(colour = "blue")),
upper=list(params = list(corSize = 6)), axis:abels = "show")
ggpairs(X, columns = c(1,4,7,8),
ggpairs(X, columns = c(1,4,7,8),
lower = list(continuous = "smooth", params = c(colour = "blue")))
ggpairs(X, columns = c(1,4,7,8),
lower = list(continuous = "smooth", params = c(colour = "blue")))
ggpairs(X, columns = c(1,4,7,8),
lower = list(continuous = "smooth"))
ggpairs(
X[1,5]
)
ggpairs(
X[1:5]
)
ggpairs(
X[1:5],
lower = list(continous = wrap(lowerFn, method = "lm")),
diag = list(continous = wrap("barDiag", colour = "blue")),
upper = list(continuous = wrap("cor", size = 10))
)
ggpairs(
X[1:5],
lower = list(continous = wrap(lowerFn, method = "lm")),
diag = list(continous = wrap("barDiag", colour = "blue")),
upper = list(continuous = wrap("cor", size = 10))
)
lowerFn <- function(X, mapping, method = "lm", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point(colour = "blue") +
geom_smooth(method = method, color = "red", ...)
}
ggpairs(
X[1:5],
lower = list(continous = wrap(lowerFn, method = "lm")),
diag = list(continous = wrap("barDiag", colour = "blue")),
upper = list(continuous = wrap("cor", size = 10))
)
ggpairs(
X[1:5],
lower = list(continous = wrap(lowerFn, method = "lm")),
diag = list(continous = wrap("barDiag", colour = "blue")),
upper = list(continuous = wrap("cor", size = 5))
)
ggpairs(
X[1:4],
lower = list(continous = wrap(lowerFn, method = "lm")),
diag = list(continous = wrap("barDiag", colour = "blue")),
upper = list(continuous = wrap("cor", size = 5))
)
lowerFn <- function(X, mapping, method = "lm", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point(colour = "blue") +
geom_smooth(method = method, color = "red", ...)
p
}
ggpairs(
X[1:4],
lower = list(continous = wrap(lowerFn, method = "lm")),
diag = list(continous = wrap("barDiag", colour = "blue")),
upper = list(continuous = wrap("cor", size = 5))
)
lowerFn <- function(data, mapping, method = "lm", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point(colour = "blue") +
geom_smooth(method = method, color = "red", ...)
p
}
ggpairs(
X[1:4],
lower = list(continous = wrap(lowerFn, method = "lm")),
diag = list(continous = wrap("barDiag", colour = "blue")),
upper = list(continuous = wrap("cor", size = 5))
)
ggpairs(
X[,1:4],
lower = list(continous = wrap(lowerFn, method = "lm")),
diag = list(continous = wrap("barDiag", colour = "blue")),
upper = list(continuous = wrap("cor", size = 5))
)
ggpairs(
X[,1:4],
lower = list(continuous = wrap(lowerFn, method = "lm")),
diag = list(continuous = wrap("barDiag", colour = "blue")),
upper = list(continuous = wrap("cor", size = 5))
)
lowerFn <- function(data, mapping, method = "lm", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point(colour = "blue") +
geom_smooth(method = method, color = "red", ...)
p
}
ggpairs(
X[,1:4],
lower = list(continuous = wrap(lowerFn, method = "lm")),
diag = list(continuous = wrap("barDiag", colour = "blue")),
upper = list(continuous = wrap("cor", size = 5))
)
ggpairs(
X, columns = c(1,3,11),
lower = list(continuous = wrap(lowerFn, method = "lm")),
diag = list(continuous = wrap("barDiag", colour = "blue")),
upper = list(continuous = wrap("cor", size = 5))
)
library(scales)
function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], "rescaled", sep = ".")
dataframe[name]n <- rescale(dataframe[,col])
}
cat(paste("Hemos rescalada ", length(cols), " variables(s)"))
dataframe
}
function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], "rescaled", sep = ".")
dataframe[name]n <- rescale(dataframe[,col])
}
cat(paste("Hemos rescalada ", length(cols), " variables(s)"))
dataframe
}
rescale.many <- function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], "rescaled", sep = ".")
dataframe[name]n <- rescale(dataframe[,col])
}
cat(paste("Hemos rescalada ", length(cols), " variables(s)"))
dataframe
}
rescale.many <- function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], "rescaled", sep = ".")
dataframe[name] <- rescale(dataframe[,col])
}
cat(paste("Hemos rescalada ", length(cols), " variables(s)"))
dataframe
}
plantaciones_rescale <- rescale.many(X, c(1,16))
plantaciones_rescale <- rescale.many(X, c(1:16))
plantaciones rescale
View(plantaciones_rescale)
rescale.many <- function(dataframe, cols){
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], "rescaled", sep = ".")
dataframe1[name] <- rescale(dataframe[,col])
}
cat(paste("Hemos rescalada ", length(cols), " variables(s)"))
dataframe1
}
plantaciones_rescale <- rescale.many(X, c(1:16))
dataframe1 <- data.frame()
rescale.many <- function(dataframe, cols){
dataframe1 <- data.frame()
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], "rescaled", sep = ".")
dataframe1[name] <- rescale(dataframe[,col])
}
cat(paste("Hemos rescalada ", length(cols), " variables(s)"))
dataframe1
}
plantaciones_rescale <- rescale.many(X, c(1:16))
X
dim(x)
dim(X)
plantaciones_rescale <- rescale.many(X, c(1:16))
a <- X[1]
a
a <- X[0]
a
x
X
View(X)
pl
rescale.many <- function(dataframe, cols){
dataframe1 <- data.frame()
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], "rescaled", sep = ".")
dataframe1[name] <- rescale(dataframe[,col])
}
cat(paste("Hemos rescalada ", length(cols), " variables(s)"))
dataframe1
}
plantaciones_rescale <- rescale.many(X, c(1:16))
a <- data.frame()
a
class(a)
a[amigos] <-X[,1]
a[1] <-X[,1]
a["MSI"] <-X[,1]
a
X[,1]
a["hola"] <- X[,1]
a["hola"] <- a[,1]
a["hola"] <- X[,1]
dataframe1 <- data.frame(pl_metricas[2])
dataframe1
rescale.many <- function(dataframe, cols){
dataframe1 <- data.frame(pl_metricas[1])
names <- names(dataframe)
for(col in cols){
name <- paste(names[col], "rescaled", sep = ".")
dataframe1[name] <- rescale(dataframe[,col])
}
cat(paste("Hemos rescalada ", length(cols), " variables(s)"))
dataframe1
}
plantaciones_rescale <- rescale.many(X, c(1:16))
plantaciones_rescale
View(plantaciones_rescale)
?scale
pl_norm <- scale(X, center = TRUE, scale = TRUE)
pl_norm
View(pl_norm)
sapply(seq(1,16),function(j)boxplot(pl_norm[,j],main=colnames(pl_norm)[j],xlab="",col="yellow"))
par(mfrow = c(2,2))
sapply(seq(1,16),function(j)boxplot(pl_norm[,j],main=colnames(pl_norm)[j],xlab="",col="yellow"))
sapply(seq(1,16),function(j)boxplot(X[,j],main=colnames(X)[j],xlab="",col="yellow"))
View(pl_norm)
par(mfrow=c(2,4))
par(mfrow=c(2,4))
sapply(seq(1,16),function(j)hist(pl_norm[,j],main=colnames(pl_norm)[j],xlab="",col="blue",breaks = "Sturges"))
sapply(seq(1,16),function(j)hist(X[,j],main=colnames(X)[j],xlab="",col="blue",breaks = "Sturges"))
sapply(seq(1,16),function(j)hist(X[,j],main=colnames(X)[j],xlab="",col="blue",breaks = "Sturges"))
par(mfrow=c(2,4))
sapply(seq(1,16),function(j)hist(X[,j],main=colnames(X)[j],xlab="",col="blue",breaks = "Sturges"))
sapply(seq(1,16),function(j)hist(plantaciones_rescale[,j],main=colnames(plantaciones_rescale)[j],xlab="",col="blue",breaks = "Sturges"))
dim(plantaciones_rescale)
sapply(seq(2,17),function(j)hist(plantaciones_rescale[,j],main=colnames(plantaciones_rescale)[j],xlab="",col="blue",breaks = "Sturges"))
