tmap_mode("view")
tm_shape(lingue)+
tm_polygons(alpha = 0.2)+
tm_shape(lingue_puntos_gpkg) +
tm_dots(size = 0.01, col = "gali_8701_")
tmap_mode("plot")
tm_shape(lingue)+
tm_polygons(alpha = 0.2)+
tm_shape(lingue_puntos_gpkg) +
tm_dots(size = 0.01, col = "gali_8701_")
tmap_mode("plot")
tm_shape(lingue)+
tm_polygons(alpha = 0.2)+
tm_shape(lingue_puntos_gpkg) +
tm_dots(size = 0.01, col = "gali_8701_")
library(rspat)
library(GWmodel)
library(sp)
library(dplyr)
library(scales)
library(pROC)
library(ape)
library(gridExtra)
library(sf)
library(terra)
library(tmap)
library(tmaptools)
library(ggplot2)
library(RColorBrewer)
library(MASS)
library(car)
library(gstat)
library(sp)
library(spatstat)
dir <- ("C:/Users/Cristian uah/Universidad de Alcala/Publicaciones - Spatial logistic model forest plantation chile/datos/modelo_8701/datos_6/")
setwd(dir)
lingue_puntos_gpkg <- st_read(dsn = "li_datos8701.gpkg", layer = "li_pts_18s")
lingue <- st_read(dsn = "lingue.shp")
dir <- ("C:/Users/Cristian uah/Universidad de Alcala/Publicaciones - Spatial logistic model forest plantation chile/datos/modelo_8701/datos_6/")
setwd(dir)
lingue_puntos_gpkg <- st_read(dsn = "li_datos8701.gpkg", layer = "li_pts_18s")
lingue <- st_read(dsn = "lingue.shp")
dir <- ("C:/Users/Cristian uah/Universidad de Alcala/Publicaciones - Spatial logistic model forest plantation chile/datos/modelo_8701/datos_6/")
setwd(dir)
lingue_puntos_gpkg <- st_read(dsn = "li_datos8701.gpkg", layer = "li_pts_18s")
lingue <- st_read(dsn = "lingue.shp")
pl_data <- read.csv("datos_wrlg_8701_lingue.csv") %>%
dplyr::select(gali_8701_,dem_lingue,dis_comunidades_lingue,dis_plant87_lingue,
pend_lingue,x_1,y_1,dis_caminos_lingue,dis_hid_lingue,predios_lingue1) %>%
relocate(x_1) %>% relocate(y_1, .after = x_1)
pl_data <- read.csv("datos_wrlg_8701_lingue.csv") %>%
dplyr::select(gali_8701_,dem_lingue,dis_comunidades_lingue,dis_plant87_lingue,
pend_lingue,x_1,y_1,dis_caminos_lingue,dis_hid_lingue,predios_lingue1) %>%
relocate(x_1) %>% relocate(y_1, .after = x_1)
dir <- ("C:/Users/Cristian uah/Universidad de Alcala/Publicaciones - Spatial logistic model forest plantation chile/datos/modelo_8701/datos_6/")
setwd(dir)
pl_data <- read.csv("datos_wrlg_8701_lingue.csv") %>%
dplyr::select(gali_8701_,dem_lingue,dis_comunidades_lingue,dis_plant87_lingue,
pend_lingue,x_1,y_1,dis_caminos_lingue,dis_hid_lingue,predios_lingue1) %>%
relocate(x_1) %>% relocate(y_1, .after = x_1)
pl_data <- na.omit(pl_data)
str(pl_data)
names(pl_data)
head(pl_data)
pl_data_2 <- distinct(pl_data, x_1, y_1, .keep_all = TRUE)
sapply(pl_data_2, is.integer)
for (i in 4:10){
pl_data_2[,i] <- scales::rescale(pl_data_2[,i], c(0,1)) #
}
for (i in 4:10){
pl_data_2[,i] <- scales::rescale(pl_data_2[,i], c(0,1))
}
num_train <- as.integer(0.8 * nrow(pl_data_2))
pl_data_2 <- distinct(pl_data, x_1, y_1, .keep_all = TRUE)
sapply(pl_data_2, is.integer)
pl_data_2 <- distinct(pl_data, x_1, y_1, .keep_all = TRUE)
num_train <- as.integer(0.8 * nrow(pl_data_2))
train <- sample(nrow(pl_data_2), num_train)
d_train <- pl_data_2[train,]
a$dis_plant87_lingue
d_test <- pl_data_2[- train,]
head(d_test)
coords_train <- cbind(d_train$x_1, d_train$y_1)
coords_test <- cbind(d_test$x_1, d_test$y_1)
spdf_train <- SpatialPointsDataFrame(coords_train, d_train)
spdf_test <- SpatialPointsDataFrame(coords_test, d_test)
DM_train <- gw.dist(dp.locat = coords_train)
DM_test <- gw.dist(dp.locat = coords_train, rp.locat = coords_test)
bw <- bw.ggwr(gali_8701_ ~ dis_comunidades_lingue + pend_lingue + dis_hid_lingue + dem_lingue + dis_plant87_lingue + dis_caminos_lingue + predios_lingue1,  data = spdf_train,
family = "binomial", approach = "aic", kernel = "bisquare", adaptive = T, dMat = DM_train) # Este es adaptativo kernel funcion bisquare
res.binomial <- ggwr.basic(gali_8701_ ~ dis_comunidades_lingue + pend_lingue + dis_hid_lingue + dem_lingue + dis_plant87_lingue + dis_caminos_lingue + predios_lingue1, data = spdf_train,
bw = bw, kernel = "bisquare", family = "binomial", adaptive = T, dMat = DM_train)
bw <- bw.ggwr(gali_8701_ ~ dis_comunidades_lingue + pend_lingue + dis_hid_lingue + dem_lingue + dis_plant87_lingue + dis_caminos_lingue + predios_lingue1,  data = spdf_train,
family = "binomial", approach = "aic", kernel = "bisquare", adaptive = T, dMat = DM_train)
#---------------------------------------------------------------------------#
##RESULTADOS DEL MODELO GWLR####
#resumen del modelo
res.binomial$GW.diagnostic
res.binomial$SDF@data
res.binomial
#---------------------------------------------------------------------------#
##RESULTADOS DEL MODELO GWLR####
#resumen del modelo
res.binomial$GW.diagnostic
res.binomial$SDF@data
res.binomial
#---------------------------------------------------------------------------#
##RESULTADOS DEL MODELO GWLR####
#resumen del modelo
res.binomial
res.binomial
res.binomial
library(GWmodel)
library(sp)
library(dplyr)
library(scales)
library(pROC)
library(ape)
library(gridExtra)
library(sf)
library(terra)
library(tmap)
library(tmaptools)
library(ggplot2)
library(RColorBrewer)
library(MASS)
library(car)
library(gstat)
library(sp)
library(spatstat)
knitr::opts_chunk$set(echo = TRUE)
library(GWmodel)
library(sp)
library(dplyr)
library(scales)
library(pROC)
library(ape)
library(gridExtra)
library(sf)
library(terra)
library(tmap)
library(tmaptools)
library(ggplot2)
library(RColorBrewer)
library(MASS)
library(car)
library(gstat)
library(sp)
library(spatstat)
dir <- ("C:/Users/Cristian uah/Universidad de Alcala/Publicaciones - Spatial logistic model forest plantation chile/datos/modelo_8701/datos_6/")
setwd(dir)
lingue_puntos_gpkg <- st_read(dsn = "li_datos8701.gpkg", layer = "li_pts_18s")
lingue <- st_read(dsn = "lingue.shp")
dir <- ("C:/Users/Cristian uah/Universidad de Alcala/Publicaciones - Spatial logistic model forest plantation chile/datos/modelo_8701/datos_6/")
setwd(dir)
pl_data <- read.csv("datos_wrlg_8701_lingue.csv") %>%
dplyr::select(gali_8701_,dem_lingue,dis_comunidades_lingue,dis_plant87_lingue,
pend_lingue,x_1,y_1,dis_caminos_lingue,dis_hid_lingue,predios_lingue1) %>%
relocate(x_1) %>% relocate(y_1, .after = x_1)
pl_data <- na.omit(pl_data)
str(pl_data)
names(pl_data)
head(pl_data)
pl_data_2 <- distinct(pl_data, x_1, y_1, .keep_all = TRUE)
for (i in 4:10){
pl_data_2[,i] <- scales::rescale(pl_data_2[,i], c(0,1))
}
num_train <- as.integer(0.8 * nrow(pl_data_2))
train <- sample(nrow(pl_data_2), num_train)
d_train <- pl_data_2[train,]
d_test <- pl_data_2[- train,]
head(d_test)
pl_data_2 <- distinct(pl_data, x_1, y_1, .keep_all = TRUE)
for (i in 4:10){
pl_data_2[,i] <- scales::rescale(pl_data_2[,i], c(0,1))
}
num_train <- as.integer(0.8 * nrow(pl_data_2))
train <- sample(nrow(pl_data_2), num_train)
d_train <- pl_data_2[train,]
d_test <- pl_data_2[- train,]
head(d_test)
coords_train <- cbind(d_train$x_1, d_train$y_1)
coords_test <- cbind(d_test$x_1, d_test$y_1)
spdf_train <- SpatialPointsDataFrame(coords_train, d_train)
spdf_test <- SpatialPointsDataFrame(coords_test, d_test)
DM_train <- gw.dist(dp.locat = coords_train)
DM_test <- gw.dist(dp.locat = coords_train, rp.locat = coords_test)
bw <- bw.ggwr(gali_8701_ ~ dis_comunidades_lingue + pend_lingue + dis_hid_lingue + dem_lingue + dis_plant87_lingue + dis_caminos_lingue + predios_lingue1,  data = spdf_train,
family = "binomial", approach = "aic", kernel = "bisquare", adaptive = T, dMat = DM_train)
res.binomial <- ggwr.basic(gali_8701_ ~ dis_comunidades_lingue + pend_lingue + dis_hid_lingue + dem_lingue + dis_plant87_lingue + dis_caminos_lingue + predios_lingue1, data = spdf_train,
bw = bw, kernel = "bisquare", family = "binomial", adaptive = T, dMat = DM_train)
res.binomial
prediction <- gwr.predict(gali_8701_ ~ dis_comunidades_lingue + pend_lingue + dis_hid_lingue + dem_lingue + dis_plant87_lingue + dis_caminos_lingue + predios_lingue1, data = spdf_train, predictdata = spdf_test,
prediction <- gwr.predict(gali_8701_ ~ dis_comunidades_lingue + pend_lingue + dis_hid_lingue + dem_lingue + dis_plant87_lingue + dis_caminos_lingue + predios_lingue1, data = spdf_train, predictdata = spdf_test,
bw = bw, kernel = "bisquare", adaptive = TRUE, dMat1 = DM_test, dMat2 = DM_train)
test_pred <- as.data.frame(prediction$SDF)
test_join <- cbind(test_pred, d_test)
data.dists <- as.matrix(dist(cbind(d_train$x_1, d_train$y_1)))
data.dists.inv <- 1/data.dists
diag(data.dists.inv) <- 0
data.dists.inv[1:5, 1:5]
Moran.I(res.binomial$SDF$residual, data.dists.inv)
data.dists <- as.matrix(dist(cbind(d_train$x_1, d_train$y_1)))
data.dists.inv <- 1/data.dists
diag(data.dists.inv) <- 0
data.dists.inv[1:5, 1:5]
Moran.I(res.binomial$SDF$residual, data.dists.inv)
res.glm <- SpatialPointsDataFrame(as.data.frame(res.binomial$glms$residuals), coords = coords_train)
names(res.glm) <- "residual"
grid.arrange(spplot(res.glm, "residual", main = "Residuos GLM"),
spplot(res.binomial$SDF, "residual", main = "Residuos GWLR"), ncol = 2)
data.dists <- as.matrix(dist(cbind(d_train$x_1, d_train$y_1)))
data.dists.inv <- 1/data.dists
diag(data.dists.inv) <- 0
data.dists.inv[1:5, 1:5]
Moran.I(res.binomial$SDF$residual, data.dists.inv)
res.glm <- SpatialPointsDataFrame(as.data.frame(res.binomial$glms$residuals), coords = coords_train)
names(res.glm) <- "residual"
grid.arrange(spplot(res.glm, "residual", main = "Residuos GLM"),
spplot(res.binomial$SDF, "residual", main = "Residuos GWLR"), ncol = 2)
predicted_class <- ifelse(test_join$prediction > 0.7, "Yes","No")
performance_data <- data.frame(observed = test_join$gali_8701_,
predicted = predicted_class)
positive <- sum(performance_data$observed == 1)
negative <- sum(performance_data$observed == 0)
predicted_positive <- sum(performance_data$predicted == "Yes")
predicted_negative <- sum(performance_data$predicted == "No")
total <- nrow(performance_data)
data.frame(positive, negative,predicted_positive,predicted_negative)
tp <- sum(performance_data$observed == 1 & performance_data$predicted == "Yes")
tn <- sum(performance_data$observed == 0 & performance_data$predicted == "No")
fp <- sum(performance_data$observed == 0 & performance_data$predicted == "Yes")
fn <- sum(performance_data$observed == 1 & performance_data$predicted == "No")
data.frame(tp,tn,fp,fn)
accuracy <- (tp + tn) / total
error_rate <- (fp + fn) / total
sensitivity <- tp / positive
especificity <- tn / negative
precision <- tp / predicted_positive
npv <- tn / predicted_negative
data.frame(accuracy, error_rate, sensitivity, especificity, precision, npv)
roc_auc <- roc(test_join$gali_8701_, test_join$prediction)
roc_auc <- roc(test_join$gali_8701_, test_join$prediction)
#---------------------------------------------------------------------------#
##VALIDACION DEL MODELO GWLR####
#curva roc y calculo del valor auc
roc_auc <- roc(test_join$gali_8701_, test_join$prediction)
#---------------------------------------------------------------------------#
##VALIDACION DEL MODELO GWLR####
#curva roc y calculo del valor auc
roc_auc <- roc(test_join$gali_8701_, test_join$prediction)
roc_auc
class(test_join$gali_8701_)
class(as.numeric(test_join$gali_8701_))
#---------------------------------------------------------------------------#
##VALIDACION DEL MODELO GWLR####
#curva roc y calculo del valor auc
roc_auc <- roc(as.numeric(test_join$gali_8701_), test_join$prediction)
class(as.numeric(test_join$gali_8701_))
class(test_join$prediction)
test_join$gali_8701_
test_join$gali_8701_ <- as.numeric(test_join$gali_8701_)
roc_auc <- roc(as.numeric(test_join$gali_8701_), test_join$prediction)
class(test_join$prediction)
roc_auc <- roc(test_join$gali_8701_), test_join$prediction)
roc_auc <- roc(test_join$gali_8701_, test_join$prediction)
roc_auc
test_join$prediction
class(test_join$prediction)
class(test_join$gali_8701_)
roc_auc <- roc(test_join$gali_8701_, test_join$prediction)
roc_auc
test_join$gali_8701_ <- numeric(test_join$gali_8701_)
?numeric
is.numeric(test_join$prediction)
is.numeric(test_join$gali_8701_)
test_join$gali_8701_ <- as.numeric(test_join$gali_8701_)
roc_auc <- roc(test_join$gali_8701_, test_join$prediction)
roc_auc
knitr::opts_chunk$set(echo = TRUE)
library(GWmodel)
library(sp)
library(dplyr)
library(scales)
library(pROC)
library(ape)
library(gridExtra)
library(sf)
library(terra)
library(tmap)
library(tmaptools)
library(ggplot2)
library(RColorBrewer)
library(MASS)
library(car)
library(gstat)
library(sp)
library(spatstat)
shiny::runApp('C:/Users/crist/Documents/GitHub/estructura-forestal-paisaje/shiny/exploratorio')
B <- "PLI"
paste(B,"BoxPLot")
runApp('C:/Users/crist/Documents/GitHub/estructura-forestal-paisaje/shiny/exploratorio')
ggplot(test, aes(x = Metricas, y = value, fill = Metricas)) +
geom_boxplot() + geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() + theme(
legend.position="none")+
xlab("")
runApp('C:/Users/crist/Documents/GitHub/estructura-forestal-paisaje/shiny/exploratorio')
runApp('C:/Users/crist/Documents/GitHub/estructura-forestal-paisaje/shiny/exploratorio')
runApp('C:/Users/crist/Documents/GitHub/estructura-forestal-paisaje/shiny/exploratorio')
runApp('C:/Users/crist/Documents/GitHub/estructura-forestal-paisaje/shiny/exploratorio')
runApp('C:/Users/crist/Documents/GitHub/estructura-forestal-paisaje/shiny/exploratorio')
runApp('C:/Users/crist/Documents/GitHub/estructura-forestal-paisaje/shiny/exploratorio')
pl_norm <- read.csv("pl_norm.csv")
pl_norm_long <- read.csv("pl_norm_long.csv")
pl_norm <- read.csv("pl_norm.csv")
pl_norm_long <- read.csv("pl_norm_long.csv")
pl_norm
ggplot(pl_norm_long, aes(x = Metricas, y = value, fill = Metricas)) +
geom_boxplot() + scale_fill_viridis(discrete = TRUE, alpha = 0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)) +
ggtitle("Basic boxplot") +
xlab("")
filter(pl_norm_long, Metricas == "PLAND.z")
pl_norm_long$Metricas
ggplot(pl_norm, aes(y = AI.z, fill = AI.z)) +
geom_boxplot() + scale_fill_viridis(discrete = TRUE, alpha = 0.6)
test <- filter(pl_norm_long, Metricas == "ENN_MN.z")
ggplot(test, aes(x = Metricas, y = value, fill = Metricas)) +
geom_boxplot() + geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() + theme(
legend.position="none")+
xlab("")
ggplot(test, aes(x = Metricas, y = value, fill = Metricas)) +
geom_boxplot() + geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() + theme(
legend.position="none")+
xlab("")
# plot
pl_norm %>%
ggplot(aes(x=DIVISION.z)) +
geom_histogram(binwidth= 0.5, fill="#69b3a2", color="#e9ecef", alpha=0.9)
# plot
pl_norm %>%
ggplot(aes(x=DIVISION.z)) +
geom_histogram(binwidth= 0.5, fill="#69b3a2", color="#e9ecef", alpha=0.9)
x <- pl_norm[,"DIVISION.z"]
ggplot(pl_m, aes(LPI,GYRATE_MN))+
geom_point(color="black") +
geom_smooth(method=lm , color="red", se=TRUE) +
theme_classic()+
ggrepel::geom_text_repel(data = pl_m, aes(label=LID))+
stat_cor(method = "pearson", label.x = 30, label.y = 350)
library(dplyr)
library(tidyr)
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(dplyr)
library(tidyr)
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(dplyr)
library(tidyr)
library(tidyverse)
library(hrbrthemes)
library(viridis)
setwd("C:/Users/crist/Documents/GitHub/estructura-forestal-paisaje/shiny/exploratorio")
pl_norm_long <- pivot_longer(pl_norm, c(-LID,-X), names_to = "Metricas" )
pl_norm <- read.csv("pl_norm.csv")
pl_norm_long <- read.csv("pl_norm_long.csv")
ggplot(pl_norm_long, aes(x = Metricas, y = value, fill = Metricas)) +
geom_boxplot() + scale_fill_viridis(discrete = TRUE, alpha = 0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)) +
ggtitle("Basic boxplot") +
xlab("")
ggplot(pl_norm_long, aes(x = Metricas, y = value, fill = Metricas)) +
geom_boxplot() + scale_fill_viridis(discrete = TRUE, alpha = 0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)) +
ggtitle("Basic boxplot") +
xlab("")
filter(pl_norm_long, Metricas == "PLAND.z")
pl_norm_long$Metricas
ggplot(pl_norm, aes(y = AI.z, fill = AI.z)) +
geom_boxplot() + scale_fill_viridis(discrete = TRUE, alpha = 0.6)
test <- filter(pl_norm_long, Metricas == "ENN_MN.z")
ggplot(test, aes(x = Metricas, y = value, fill = Metricas)) +
geom_boxplot() + geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() + theme(
legend.position="none")+
xlab("")
ggplot(pl_norm, aes(y = AI.z, fill = AI.z)) +
geom_boxplot() + scale_fill_viridis(discrete = TRUE, alpha = 0.6)
ggplot(test, aes(x = Metricas, y = value, fill = Metricas)) +
geom_boxplot() + geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() + theme(
legend.position="none")+
xlab("")
ggplot(test, aes(x = Metricas, y = value, fill = Metricas)) +
geom_boxplot() + geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() + theme(
legend.position="none")+
xlab("")
ggplot(pl_norm, aes(y = AI.z, fill = AI.z)) +
geom_boxplot() + scale_fill_viridis(discrete = TRUE, alpha = 0.6)
pl_norm
ggplot(pl_norm, aes(LPI,GYRATE_MN))+
geom_point(color="black") +
geom_smooth(method=lm , color="red", se=TRUE) +
theme_classic()+
ggrepel::geom_text_repel(data = pl_m, aes(label=LID))+
stat_cor(method = "pearson", label.x = 30, label.y = 350)
ggplot(pl_norm, aes(LPI,GYRATE_MN))+
geom_point(color="black") +
geom_smooth(method=lm , color="red", se=TRUE) +
theme_classic()+
ggrepel::geom_text_repel(data = pl_norm, aes(label=LID))+
stat_cor(method = "pearson", label.x = 30, label.y = 350)
library(ggplot2)
library(hrbrthemes)
library(ggrepel)
library(ggpubr)
library(tidyverse)
ggplot(pl_norm, aes(LPI,GYRATE_MN))+
geom_point(color="black") +
geom_smooth(method=lm , color="red", se=TRUE) +
theme_classic()+
ggrepel::geom_text_repel(data = pl_norm, aes(label=LID))+
stat_cor(method = "pearson", label.x = 30, label.y = 350)
ggplot(pl_norm, aes(LPI.z,GYRATE_MN.z))+
geom_point(color="black") +
geom_smooth(method=lm , color="red", se=TRUE) +
theme_classic()+
ggrepel::geom_text_repel(data = pl_norm, aes(label=LID))+
stat_cor(method = "pearson", label.x = 30, label.y = 350)
ggplot(pl_norm, aes(LPI.z,GYRATE_MN.z))+
geom_point(color="black") +
geom_smooth(method=lm , color="red", se=TRUE) +
theme_classic()+
ggrepel::geom_text_repel(data = pl_norm, aes(label=LID))+
stat_cor(method = "pearson", label.x = 10, label.y = 5)
ggplot(pl_norm, aes(LPI.z,GYRATE_MN.z))+
geom_point(color="black") +
geom_smooth(method=lm , color="red", se=TRUE) +
theme_classic()+
ggrepel::geom_text_repel(data = pl_norm, aes(label=LID))+
stat_cor(method = "pearson", label.x = 5, label.y = 4)
ggplot(pl_norm, aes(LPI.z,GYRATE_MN.z))+
geom_point(color="black") +
geom_smooth(method=lm , color="red", se=TRUE) +
theme_classic()+
ggrepel::geom_text_repel(data = pl_norm, aes(label=LID))+
stat_cor(method = "pearson", label.x = 2, label.y = 4)
ggplot(pl_norm, aes(PLAND.z,GYRATE_MN.z))+
geom_point(color="black") +
geom_smooth(method=lm , color="red", se=TRUE) +
theme_classic()+
ggrepel::geom_text_repel(data = pl_norm, aes(label=LID))+
stat_cor(method = "pearson", label.x = 2, label.y = 4)
ggplot(pl_norm, aes(PLAND.z,GYRATE_MN.z))+
geom_point(color="black") +
geom_smooth(method=lm , color="red", se=TRUE) +
theme_classic()+
ggrepel::geom_text_repel(data = pl_norm, aes(label=LID))+
stat_cor(method = "pearson", label.x = 2, label.y = 4)
ggplot(pl_norm, aes(PLAND.z,GYRATE_MN.z))+
geom_point(color="black") +
geom_smooth(method=lm , color="red", se=TRUE) +
theme_classic()+
ggrepel::geom_text_repel(data = pl_norm, aes(label=LID))+
stat_cor(method = "pearson", label.x = 2, label.y = 4)
ggplot(pl_norm, aes(PLAND.z,GYRATE_MN.z))+
geom_point(color="black") +
geom_smooth(method=lm , color="red", se=TRUE) +
theme_classic()+
ggrepel::geom_text_repel(data = pl_norm, aes(label=LID))+
stat_cor(method = "pearson", label.x = 2, label.y = 4)
runApp()
runApp()
runApp()
runApp()
library(psych)
library(GPArotation)
library(dplyr)
setwd("~/GitHub/estructura-forestal-paisaje")
setwd("C:/Users/crist/Documents/GitHub/estructura-forestal-paisaje")
pl <- read.csv("metricas_seleccion_ejercicio.csv")
pl_norm <- read.csv("pl_norm.csv")
pl_rescale <- read.csv("pl_rescale.csv")
cor_pl <- cor(pl[,3:18])
cor_pl_norm <- cor(pl_norm[,3:18])
cor_pl_rescale <- cor(pl_rescale[,3:18])
cor_pl_rescale <- cor(pl_rescale[,3:18])
par(mfrow = c(1,1))
fa.parallel(pl[,3:18], fm = "ml", fa = "pa", n.iter = 500, ylab = "Eigenvalue")
fa.parallel(pl_norm[,3:18], fm = "ml", fa = "fa")
fa.parallel(pl_rescale[,3:18], fm = "ml", fa = "fa")
EFA_model <- fa(pl[,3:18],3, rotate = "varimax", fm = "minchi")
EFA_model1 <- fa(pl_norm[,3:18],3, rotate = "varimax", fm = "minchi")
EFA_model2 <- fa(pl_rescale[,3:18],3, rotate = "varimax", fm = "minchi")
print(EFA_model)
length(pl_norm$X)
